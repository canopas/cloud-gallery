name: Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: 17.0.6
          cache: 'gradle'

      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Set up ruby env
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0
          bundle-cache: true

      - name: Retrieve the secret and decode it to a file
        env:
          FIREBASE_OPTIONS_BASE64: ${{ secrets.FIREBASE_OPTIONS_BASE64 }}
          GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
          APP_SECRETS_BASE64: ${{ secrets.APP_SECRETS_BASE64 }}
          FIREBASE_JSON_BASE64: ${{ secrets.FIREBASE_JSON_BASE64 }}
        run: |
          cd app
          echo $FIREBASE_OPTIONS_BASE64 | base64 -di > lib/firebase_options.dart
          echo $GOOGLE_SERVICES_JSON_BASE64 | base64 -di > android/app/google-services.json
          echo $FIREBASE_JSON_BASE64 | base64 --decode > firebase.json
          cd ../data
          echo $APP_SECRETS_BASE64 | base64 --decode > lib/apis/network/secrets.dart

      - name: Install dependencies
        run: |
          cd app
          flutter clean
          flutter pub get
          
          cd ../data
          flutter clean
          flutter pub get
          
          cd ../style
          flutter clean
          flutter pub get
          
          cd ..

      - name: Build android APK
        env:
          APKSIGN_KEYSTORE_BASE64: ${{ secrets.APKSIGN_KEYSTORE_BASE64 }}
          APKSIGN_KEYSTORE_PASS: ${{ secrets.APKSIGN_KEYSTORE_PASS }}
          APKSIGN_KEY_ALIAS: ${{ secrets.APKSIGN_KEY_ALIAS }}
          APKSIGN_KEY_PASS: ${{ secrets.APKSIGN_KEY_PASS }}
        run: |
          echo $APKSIGN_KEYSTORE_BASE64 | base64 -di > release.keystore
          export APKSIGN_KEYSTORE=`pwd`/release.keystore
          cd app
          file='VERSION'
          fileData=$(cat $file)
          IFS='.'
          read -a versionValue <<< "$fileData"
          buildNumber=$(( ${versionValue[0]} * 1000000 + ${versionValue[1]} * 10000 + CI_PIPELINE_IID ))
          IFS=''
          buildName="${versionValue[0]}.${versionValue[1]}.$CI_PIPELINE_IID"

          echo "Generating android build $buildName $buildNumber"
          flutter build apk --release --build-number=$buildNumber --build-name=$buildName
          mv build/app/outputs/apk/release/*.apk .
          cd ..

      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cloud-gallery.apk
          path: app/*.apk
          if-no-files-found: error

